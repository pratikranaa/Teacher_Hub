# Generated by Django 4.2.16 on 2024-11-19 17:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('user_type', models.CharField(choices=[('SCHOOL_ADMIN', 'School Administrator'), ('PRINCIPAL', 'School Principal'), ('INTERNAL_TEACHER', 'Internal Teacher'), ('EXTERNAL_TEACHER', 'External Teacher'), ('STUDENT', 'Student')], max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='accounts_user_set', related_query_name='accounts_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='accounts_user_set', related_query_name='accounts_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('school_name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('PRIMARY', 'Primary School'), ('MIDDLE', 'Middle School'), ('SECONDARY', 'Secondary School'), ('HIGHER_SECONDARY', 'Higher Secondary School'), ('DEGREE_COLLEGE', 'Degree College'), ('UNIVERSITY', 'University'), ('OTHER', 'Other')], max_length=20)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=10)),
                ('website', models.URLField(blank=True)),
                ('contact_person', models.CharField(max_length=255)),
                ('board_type', models.CharField(choices=[('CBSE', 'CBSE'), ('ICSE', 'ICSE'), ('IB', 'IB'), ('PUNJAB', 'Punjab Board'), ('HARYANA', 'Haryana Board'), ('HIMACHAL', 'Himachal Board'), ('RAJASTHAN', 'Rajasthan Board'), ('UP', 'Uttar Pradesh Board'), ('MP', 'Madhya Pradesh Board'), ('BIHAR', 'Bihar Board'), ('JHARKHAND', 'Jharkhand Board'), ('WEST_BENGAL', 'West Bengal Board'), ('ODISHA', 'Odisha Board'), ('ASSAM', 'Assam Board'), ('NAGALAND', 'Nagaland Board'), ('ARUNACHAL', 'Arunachal Pradesh Board'), ('MANIPUR', 'Manipur Board'), ('MEGHALAYA', 'Meghalaya Board'), ('TRIPURA', 'Tripura Board'), ('MIZORAM', 'Mizoram Board'), ('SIKKIM', 'Sikkim Board'), ('GOA', 'Goa Board'), ('GUJARAT', 'Gujarat Board'), ('MAHARASHTRA', 'Maharashtra Board'), ('KARNATAKA', 'Karnataka Board'), ('KERALA', 'Kerala Board'), ('TAMIL_NADU', 'Tamil Nadu Board'), ('TELANGANA', 'Telangana Board'), ('ANDHRA', 'Andhra Pradesh Board'), ('UTTARAKHAND', 'Uttarakhand Board'), ('JAMMU', 'Jammu & Kashmir Board'), ('CHHATTISGARH', 'Chhattisgarh Board'), ('DELHI', 'Delhi Board'), ('OTHER', 'Other Board')], max_length=50)),
                ('registration_number', models.CharField(max_length=50, unique=True)),
                ('established_year', models.IntegerField()),
                ('verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription_status', models.CharField(choices=[('BASIC', 'Basic'), ('STANDARD', 'Standard'), ('PREMIUM', 'Premium'), ('ENTERPRISE', 'Enterprise')], default='BASIC', max_length=20)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_type', models.CharField(choices=[('INTERNAL', 'Internal Teacher'), ('EXTERNAL', 'External Teacher')], max_length=20)),
                ('qualification', models.CharField(max_length=255)),
                ('subjects', models.JSONField()),
                ('experience_years', models.IntegerField()),
                ('preferred_classes', models.JSONField(default=list)),
                ('preferred_boards', models.JSONField(default=list)),
                ('teaching_methodology', models.TextField(blank=True)),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('availability_status', models.CharField(choices=[('AVAILABLE', 'Available'), ('BUSY', 'Busy'), ('UNAVAILABLE', 'Unavailable')], max_length=20)),
                ('availability_schedule', models.JSONField(default=dict)),
                ('languages', models.JSONField(default=list)),
                ('can_teach_online', models.BooleanField(default=True)),
                ('can_travel', models.BooleanField(default=True)),
                ('document_verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('travel_radius', models.IntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_sessions', models.IntegerField(default=0)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(choices=[('NURSERY', 'Nursery'), ('LKG', 'LKG'), ('UKG', 'UKG'), ('1', '1st'), ('2', '2nd'), ('3', '3rd'), ('4', '4th'), ('5', '5th'), ('6', '6th'), ('7', '7th'), ('8', '8th'), ('9', '9th'), ('10', '10th'), ('11', '11th'), ('12', '12th'), ('OTHER', 'Other')], max_length=20)),
                ('section', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=10)),
                ('roll_number', models.CharField(max_length=20)),
                ('parent_name', models.CharField(max_length=255)),
                ('parent_phone', models.CharField(max_length=15)),
                ('parent_email', models.EmailField(max_length=254)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='accounts.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('PRINCIPAL', 'Principal'), ('TEACHER', 'Teacher')], max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('joining_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='school_staff', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
