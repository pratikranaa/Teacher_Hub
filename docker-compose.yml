version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: teacher_hub_db
    environment:
      POSTGRES_DB: teacher_hub
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: teacher_hub_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: teacher_hub_backend
    environment:
      - SECRET_KEY=django-insecure-docker-key-change-in-production
      - DEBUG=True
      - DB_NAME=teacher_hub
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-your-email@gmail.com}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-your-app-password}
      - EMAIL_USE_TLS=True
      - SECRET_KEY_JIO=${SECRET_KEY_JIO:-your-jio-secret}
      - APP_ID_JIO=${APP_ID_JIO:-your-jio-app-id}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/staticfiles:/app/staticfiles
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py create_sample_data &&
        python manage.py fix_internal_teachers &&
        uvicorn backend.asgi:application --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped

  # Celery Worker for background tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: teacher_hub_celery
    environment:
      - SECRET_KEY=django-insecure-docker-key-change-in-production
      - DEBUG=True
      - DB_NAME=teacher_hub
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-your-email@gmail.com}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-your-app-password}
      - EMAIL_USE_TLS=True
      - SECRET_KEY_JIO=${SECRET_KEY_JIO:-your-jio-secret}
      - APP_ID_JIO=${APP_ID_JIO:-your-jio-app-id}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    command: celery -A backend worker --loglevel=info
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: teacher_hub_celery_beat
    environment:
      - SECRET_KEY=django-insecure-docker-key-change-in-production
      - DEBUG=True
      - DB_NAME=teacher_hub
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-your-email@gmail.com}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-your-app-password}
      - EMAIL_USE_TLS=True
      - SECRET_KEY_JIO=${SECRET_KEY_JIO:-your-jio-secret}
      - APP_ID_JIO=${APP_ID_JIO:-your-jio-app-id}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    command: celery -A backend beat --loglevel=info
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: teacher_hub_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SOCKET_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: teacher_hub_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: teacher_hub_network 